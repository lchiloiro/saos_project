input {
  tcp {
    port => 514
    add_field => { "log_type" => "syslog" }
  }
  file {
    path => "/path/to/keycloak/standalone/log/server.log"
    add_field => { "log_type" => "keycloak" }
    start_position => "beginning"
    sincedb_path => "/dev/null"  # per test, rilegge da capo
  }
}

filter {
  if [log_type] == "syslog" or [log_type] == "keycloak" {

    grok {
      match => {
        "message" => [
          # pattern syslog generico
          "type=%{WORD:event_type}\\s+.*?userId=%{DATA:user_id}.*?clientId=%{DATA:client_id}.*?ipAddress=%{IP:ip_address}",
          # pattern Keycloak più aderente al tuo esempio
          ".*type=\"%{WORD:event_type}\", realmId=\"%{DATA:realm_id}\", realmName=\"%{DATA:realm_name}\", clientId=\"%{DATA:client_id}\", userId=\"%{DATA:user_id}\", sessionId=\"%{DATA:session_id}\", ipAddress=\"%{IP:ip_address}\".*"
        ]
      }
      tag_on_failure => ["_grokparsefailure"]
    }

    # Copia log_type in type (campo usato comunemente in Kibana)
    mutate {
      copy => { "log_type" => "type" }
    }

    # Per eventi di login/logout, aggiunge campi extra
    if [event_type] in ["LOGIN", "LOGOUT", "LOGIN_ERROR", "USER_LOGIN", "USER_LOGOUT"] {
      mutate {
        add_field => {
          "auth_event" => "true"
          "event_description" => "%{event_type} for user %{user_id} from IP %{ip_address}"
        }
      }
    }

    # Parsing del timestamp, se presente
    if [timestamp] and [timestamp] != "" {
      date {
        match => ["timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss,SSS"]
        target => "@timestamp"
      }
    } else {
      # fallback: se non c'è timestamp, usa il tempo di ingestione
      mutate {
        add_field => { "[@metadata][ingest_time]" => "%{+YYYY-MM-dd HH:mm:ss}" }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "keycloak-logs-%{+YYYY.MM.dd}"
  }
}
